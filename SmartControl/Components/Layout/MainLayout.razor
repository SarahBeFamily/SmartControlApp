@implements IDisposable
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<DxLayoutBreakpoint DeviceSize="DeviceSize.XSmall" @bind-IsActive="@isXSmallScreen" />

<div class="page">

    <header id="main" class="flex flex-between">

        @if (isXSmallScreen)
        {
            <div id="ham" onclick="(document.getElementById('sidebar').classList.toggle('collapsed'));(this.classList.toggle('open'))">
                <i class="bi bi-list"></i>
                <i class="bi bi-x"></i>
            </div>
        } else
		{
            <div id="brand-image">
                <div class="menu-button" onclick="(document.getElementById('sidebar').classList.toggle('collapsed'));(document.getElementById('brand-image').classList.toggle('collapsed'))">
                    <img src="Assets/images/Loghi/Logo_SmartControl.svg" alt="SmartControl" class="brand-image" width="220" height="29" />
                    <img src="Assets/images/Loghi/Logotipo_SmartControl.svg" alt="SmartControl" class="brand-image collapsed" width="49" height="30" />
                </div>
            </div>
		}

        <div class="w-100 nav-buttons-container">

            <SCTopMenu></SCTopMenu>

            <SCHeaderUserArea>
                <SCUsernameRoleData NomeUtente="Sarah Pinna" RuoloUtente="Dev"></SCUsernameRoleData>

                <SCDivider></SCDivider>

                <SCButton Icon="icon-user" Text="Il mio profilo" CssClass="menu-button display-desktop" RenderStyle="link" Url="#"></SCButton>
                <SCButton Icon="icon-cloud" Text="Gestione istanza" CssClass="menu-button display-desktop" RenderStyle="link" Url="#"></SCButton>

                <form action="Account/Logout" method="get" class="display-desktop">
                    <AntiforgeryToken />
                    <SCButton Icon="icon-logout" Text="Log out" CssClass="menu-button display-desktop" SubmitFormOnClick="true"></SCButton>
                   @*  <DxButton RenderStyle="@ButtonRenderStyle.Link" CssClass="menu-button icon-button icon-logout"  SubmitFormOnClick="true" Text="Log out" RenderStyleMode="@ButtonRenderStyleMode.Text"></DxButton> *@
                </form>

                <SCDivider></SCDivider>

                <SCButton Icon="icon-wiki" Text="Wiki" CssClass="menu-button external-url" RenderStyle="link" Url="#"></SCButton>
                <SCButton Icon="icon-blog" Text="Blog" CssClass="menu-button external-url" RenderStyle="link" Url="#"></SCButton>
                <SCButton Icon="icon-globe" Text="Sito web" CssClass="menu-button external-url" RenderStyle="link" Url="#"></SCButton>

            </SCHeaderUserArea>

        </div>

       
    </header>

    @{
        var sidebarClass = isXSmallScreen ? "collapsed" : "";
        var flexWrap = isXSmallScreen ? " flex-wrap" : "";
    }

    <div id="main-container" class="flex @flexWrap">
        <div id="sidebar" class="@sidebarClass">

            @* To Do: creare componente per questo blocco *@
            <div class="company flex">
                <img src="Assets/images/Loghi/company-sidebar.png" alt="" />
                <div class="info flex flex-column">
                    <span class="name">Credipass srl</span>
					<span class="role">Hgroup</span>
                </div>
            </div>

            <SCDivider></SCDivider>

            <SCMenu Menu="main"></SCMenu>

            <SCDivider></SCDivider>

            <SCMenu Menu="settings"></SCMenu>

            <button id="sidebar-collapse-btn" class="menu-button" onclick="(document.getElementById('sidebar').classList.toggle('collapsed'));(document.getElementById('brand-image').classList.toggle('collapsed'));(document.querySelector('#brand-image .menu-button').classList.toggle('collapsed'))">
				<i class="icon-chevron-left"></i>
            </button>
        </div>

        <div class="main-content">
            @Body
        </div>
    </div>

    <footer>

    </footer>
</div>

@code {
    public bool isXSmallScreen { get; set; }
    private string? currentUrl;


    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

}
